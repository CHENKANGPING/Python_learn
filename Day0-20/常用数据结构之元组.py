# 元组的定义和运算
"""
    元组(tuple) 也是多个元素按照一定顺序构成的序列
    元组是不可变类型
    元组类型的变量一旦定义就不可改变
    定义元组通常使用(x, y, z)的字面量语法
"""
# 定义一个三元组
t1 = (35, 12, 28)
# 定义一个四元组
t2 = ('陈康平', 22, True, '辽宁大连')

# 查看变量类型
print(type(t1))
print(type(t2))

# 查看元组中元素的个数
print(len(t1))
print(len(t2))

# 索引运算
print(t1[0])
print(t1[2])
print(t2[-2])

# 切片运算
print(t2[:2])
print(t2[::3])

# 循环遍历元组中的元素
for elem in t1:
    print(elem)

# 成员运算
print(12 in t1)
print(99 in t1)
print('何一凡' in t2)

# 拼接运算
t3 = t1 + t2
print(t3)

# 比较运算
print(t1 == t3)
print(t1 >= t3)
print(t1 <= (35, 11, 99))

# 注:() 表示空元组 如果元组中只有一个元组是 需要加上1一个逗号
# (100,) ('hello',) 这样才是元组
# (100) ('hello) 不是


print('--------------------------------------------------')



# 打包和解包
# 当我们把用多个逗号分隔的值赋给一个变量时
# 多个值会打包成一个元组类型
# 当我们把一个元组赋值给多个变量时
# 元组会解包成多个值然后分别赋值给对应的变量

# 打包
a = 1, 10, 100
print(type(a))
print(a)

# 解包
i, j, k = a
print(i, j, k )
# 注:如果解包出来的元素个数与变量个数不对应,会引发ValuseError


print('--------------------------------------------------')


"""
    星号表达式
    可以让一个变量接受多个值
    用星号表达式修饰的变量会变成一个列表
    列表中有0个或多个元素
    在解包语法中
    星号表达式只能出现一次
"""

a = 1, 10, 100, 1000
i, j, *k = a
print(i, j, k)        # 1 10 [100, 1000]
i, *j, k = a
print(i, j, k)        # 1 [10, 100] 1000
*i, j, k = a
print(i, j, k)        # [1, 10] 100 1000
*i, j = a
print(i, j)           # [1, 10, 100] 1000
i, *j = a
print(i, j)           # 1 [10, 100, 1000]
i, j, k, *l = a
print(i, j, k, l)     # 1 10 100 [1000]
i, j, k, l, *m = a
print(i, j, k, l, m)  # 1 10 100 1000 []


print('--------------------------------------------------')


a, b, *c = range(1, 10)
print(a, b, c)
a, b, c = [1, 10, 100]
print(a, b, c)
a, *b, c = 'hello'
print(a, b, c)


print('--------------------------------------------------')


"""
    交换变量的值
    在python中交换变量的值
    交换a b 的值
    用下面的代码
"""
a, b = b, a

# 三个变量a b c 
a, b, c = b, c, a

"""
    元组与列表的比较
    元组式不可变类型 不可变类型更适合多线程开发
    降低了并发量访问变量的同步化开销
    通常不可变类型在创建时间上要优于对应的可变变量
    下面的代码举个例子
"""
import timeit

print('%.3f 秒' % timeit.timeit('[1, 2, 3, 4, 5, 6, 7, 8, 9]', number=10000000))
print('%.3f 秒' % timeit.timeit('(1, 2, 3, 4, 5, 6, 7, 8, 9)', number=10000000))


print('--------------------------------------------------')


# 元组和列表类型的互相转换
infos = ('陈康平', 22, True, '辽宁大连')
print(list(infos))

frts = ['apple', 'peach', 'banana']
print(tuple(frts)) 


"""
    列表和元组都是容器型的数据类型，即一个变量可以保存多个数据，而且它们都是按一定顺序组织元素的有序容器。
    列表是可变数据类型，元组是不可变数据类型，所以列表可以添加元素、删除元素、清空元素、排序反转，但这些操作对元组来说是不成立的。
    列表和元组都可以支持拼接运算、成员运算、索引运算、切片运算等操作，后面我们要讲到的字符串类型也支持这些运算，
    因为字符串就是字符按一定顺序构成的序列，在这一点上三者并没有什么区别。
    我们推荐大家使用列表的生成式语法来创建列表，它不仅好用而且效率很高，是 Python 语言中非常有特色的语法。
"""



 






